/**
 * MozartSpaces - Java implementation of Extensible Virtual Shared Memory (XVSM)
 * Copyright 2009-2013 Space Based Computing Group, eva Kuehn, E185/1, TU Vienna
 * Visit http://www.mozartspaces.org for more information.
 *
 * MozartSpaces is free software: you can redistribute it and/or
 * modify it under the terms of version 3 of the GNU Affero General
 * Public License as published by the Free Software Foundation.
 *
 * MozartSpaces is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General
 * Public License along with MozartSpaces. If not, see
 * <http://www.gnu.org/licenses/>.
 */
/* Generated By:JavaCC: Do not edit this line. CCOqlParserConstants.java */
package org.mozartspaces.util.parser.sql.javacc;

/**
 * Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CCOqlParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int UNDERSCORE = 5;
    /** RegularExpression Id. */
    int PERIOD = 6;
    /** RegularExpression Id. */
    int COMMA = 7;
    /** RegularExpression Id. */
    int OPEN_PARENS = 8;
    /** RegularExpression Id. */
    int CLOSE_PARENS = 9;
    /** RegularExpression Id. */
    int INTEGER = 10;
    /** RegularExpression Id. */
    int LONG = 11;
    /** RegularExpression Id. */
    int FLOAT = 12;
    /** RegularExpression Id. */
    int DOUBLE = 13;
    /** RegularExpression Id. */
    int DIGIT = 14;
    /** RegularExpression Id. */
    int SIGN = 15;
    /** RegularExpression Id. */
    int FLOAT_SUFFIX = 16;
    /** RegularExpression Id. */
    int DOUBLE_SUFFIX = 17;
    /** RegularExpression Id. */
    int LONG_SUFFIX = 18;
    /** RegularExpression Id. */
    int STRING = 19;
    /** RegularExpression Id. */
    int SINGLE_QUOTED_STRING = 20;
    /** RegularExpression Id. */
    int DOUBLE_QUOTED_STRING = 21;
    /** RegularExpression Id. */
    int DOUBLE_QUOTE = 22;
    /** RegularExpression Id. */
    int SINGLE_QUOTE = 23;
    /** RegularExpression Id. */
    int AND = 24;
    /** RegularExpression Id. */
    int OR = 25;
    /** RegularExpression Id. */
    int NOT = 26;
    /** RegularExpression Id. */
    int EQUALS = 27;
    /** RegularExpression Id. */
    int NOT_EQUALS = 28;
    /** RegularExpression Id. */
    int GREATER_THAN = 29;
    /** RegularExpression Id. */
    int LESS_THAN = 30;
    /** RegularExpression Id. */
    int GREATER_THAN_OR_EQUAL = 31;
    /** RegularExpression Id. */
    int LESS_THAN_OR_EQUAL = 32;
    /** RegularExpression Id. */
    int BETWEEN = 33;
    /** RegularExpression Id. */
    int LIKE = 34;
    /** RegularExpression Id. */
    int IN = 35;
    /** RegularExpression Id. */
    int LIMIT = 36;
    /** RegularExpression Id. */
    int IDENTIFIER = 37;
    /** RegularExpression Id. */
    int IDENTIFIER_SEGMENT = 38;
    /** RegularExpression Id. */
    int IDENTIFIER_START = 39;
    /** RegularExpression Id. */
    int IDENTIFIER_PART = 40;
    /** RegularExpression Id. */
    int LETTER = 41;

    /** Lexical state. */
    int DEFAULT = 0;

    /** Literal token values. */
    String[] tokenImage = { "<EOF>", "\" \"", "\"\\r\"", "\"\\t\"", "\"\\n\"", "\"_\"", "\".\"", "\",\"", "\"(\"",
            "\")\"", "<INTEGER>", "<LONG>", "<FLOAT>", "<DOUBLE>", "<DIGIT>", "<SIGN>", "<FLOAT_SUFFIX>",
            "<DOUBLE_SUFFIX>", "<LONG_SUFFIX>", "<STRING>", "<SINGLE_QUOTED_STRING>", "<DOUBLE_QUOTED_STRING>",
            "\"\\\"\"", "\"\\\'\"", "\"AND\"", "\"OR\"", "\"NOT\"", "\"=\"", "\"<>\"", "\">\"", "\"<\"", "\">=\"",
            "\"<=\"", "\"BETWEEN\"", "\"LIKE\"", "\"IN\"", "\"LIMIT\"", "<IDENTIFIER>", "<IDENTIFIER_SEGMENT>",
            "<IDENTIFIER_START>", "<IDENTIFIER_PART>", "<LETTER>", };

}
