/**
 * MozartSpaces - Java implementation of Extensible Virtual Shared Memory
 * Copyright 2010 Space Based Computing Group. All rights reserved.
 * Use is subject to license terms.
 */
package clientetuplespace;

<<<<<<< HEAD
import static clientetuplespace.ClienteTupleSpacesource.TIMEOUT;
import java.io.IOException;
=======
>>>>>>> tuple-space
import java.io.Serializable;
import java.net.URI;
import java.util.ArrayList;
<<<<<<< HEAD
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
=======
import java.util.Arrays;
import java.util.List;

>>>>>>> tuple-space
import org.mozartspaces.capi3.LindaCoordinator;
import org.mozartspaces.capi3.LindaCoordinator.LindaSelector;
import org.mozartspaces.capi3.Queryable;
import org.mozartspaces.core.Capi;
import org.mozartspaces.core.ContainerReference;
import org.mozartspaces.core.DefaultMzsCore;
import org.mozartspaces.core.Entry;
import static org.mozartspaces.core.MzsConstants.Container.UNBOUNDED;
import org.mozartspaces.core.MzsConstants.RequestTimeout;
import org.mozartspaces.core.MzsConstants.Selecting;
import org.mozartspaces.core.MzsCore;
import org.mozartspaces.core.MzsCoreException;

/**
 * Linda matching example.
 *
 * @author Tobias Doenz
 */
<<<<<<< HEAD
public class ClienteTupleSpace extends javax.swing.JFrame {

    private int portaServidor;
    private String ipServidor;
    private DefaultMzsCore core;
    private static Capi capi;
    private static ContainerReference container;
    private URI spaceURI;
    private String nomeContainer;

    /**
     * Creates new form ClienteTupleSpace
     */
    public ClienteTupleSpace() {
        System.out.println("Construindo Cliente Tuple Space");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnConectar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtIPServidor = new javax.swing.JTextField();
        txtPortaServidor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNomeContainer = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cliente TupleSpace"));

        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        jLabel2.setText("Porta");

        jLabel1.setText("IP");

        txtIPServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIPServidorActionPerformed(evt);
            }
        });

        jLabel3.setText("Nome do Container");

        txtNomeContainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeContainerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(102, 102, 102)
                                .addComponent(txtPortaServidor))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNomeContainer)
                                    .addComponent(txtIPServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(85, 85, 85))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnConectar)
                        .addGap(178, 178, 178))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNomeContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(txtIPServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txtPortaServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(btnConectar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIPServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIPServidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIPServidorActionPerformed

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        this.ipServidor = txtIPServidor.getText();
        this.portaServidor = Integer.parseInt(txtPortaServidor.getText());
        this.nomeContainer = txtNomeContainer.getText();
        try {
            conectarServidor();
        } catch (URISyntaxException | MzsCoreException ex) {
            Logger.getLogger(ClienteTupleSpace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConectarActionPerformed

    private void txtNomeContainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeContainerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeContainerActionPerformed

    private void conectarServidor() throws URISyntaxException, MzsCoreException {
        System.out.println("Se conectando ao servidor");
        this.core = DefaultMzsCore.newInstance(0);
        ClienteTupleSpace.capi = new Capi(core);
        this.spaceURI = new URI("xvsm://" + this.ipServidor + ":" + this.portaServidor);
        System.out.println("Se conectando em: [" + "xvsm://" + ipServidor + ":" + portaServidor + "]");
        System.out.println("Nome do servidor: " + this.nomeContainer);
        
        ClienteTupleSpace.container = capi.lookupContainer(this.nomeContainer, this.spaceURI, RequestTimeout.TRY_ONCE, null);
=======
public class ClienteTupleSpace {
    
    private static URI SPACE;
    private static MzsCore core;
    private static Capi capi;
    private static ContainerReference cref;
    
    private static String nomeContainer = "admin";
    private static String ipServidor = "localhost";
    private static int portaServidor = 9000;

    public ClienteTupleSpace(String nomeContainer, String ipServidor, int portaServidor) throws MzsCoreException { 
        ClienteTupleSpace.nomeContainer = nomeContainer;
        ClienteTupleSpace.ipServidor = ipServidor;
        ClienteTupleSpace.portaServidor = portaServidor;
        
        procurarServidor();
    }
    
    public void setNomeContainer(String nomeContainer) {
        ClienteTupleSpace.nomeContainer = nomeContainer;
    }
    
    public void setIpServidor(String ipServidor) {
        ClienteTupleSpace.ipServidor = ipServidor;
    }
        
    public void setPortaServidor(Integer portaServidor) {
        ClienteTupleSpace.portaServidor = portaServidor;
    }
    
    
    public static void encerrar () throws MzsCoreException {
        capi.shutdown(null);
    }
    
    public static void procurarServidor() throws MzsCoreException {
        SPACE = URI.create("xvsm://" + ipServidor + ":" + portaServidor);
        core = DefaultMzsCore.newInstance(0);
        capi = new Capi(core);
>>>>>>> tuple-space
        
        cref = capi.lookupContainer(nomeContainer, SPACE, RequestTimeout.ZERO, null);
    }
    
<<<<<<< HEAD
    public static void write(int numeroAssento, char letraFileira) throws MzsCoreException {
        System.out.println("Recebendo: " + numeroAssento + letraFileira);
        Assento oAssento = new Assento(numeroAssento, letraFileira);
        capi.write(ClienteTupleSpace.container, new Entry((Serializable) oAssento));
        System.out.println("!!");
    }
    
    public static ArrayList<Assento> read(int numeroAssento, char letraFileira) throws MzsCoreException {
=======
    public void write(Integer numeroAssento, String letraFileira) throws MzsCoreException {
        System.out.println("\n\n!!!! Escrevendo: (" + numeroAssento + "," + letraFileira + ")\n\n");
        
        Assento oAssento = new Assento(numeroAssento, letraFileira);
        capi.write(cref, new Entry((Serializable) oAssento));
    }
    
    public ArrayList<Assento> read(Integer numeroAssento, String letraFileira) throws MzsCoreException {
        System.out.println("\n\n!!!! Lendo: (" + numeroAssento + "," + letraFileira + ")\n\n");
        
>>>>>>> tuple-space
        ArrayList<Assento> resultadoPesquisa;
        Assento template = new Assento(numeroAssento, letraFileira);
        
        LindaCoordinator.LindaSelector newSelector = LindaCoordinator.newSelector(template, 1);
        
        resultadoPesquisa = capi.read(cref, newSelector, 0, null);
        
        System.out.println("Resultado da pesquisa: " + resultadoPesquisa);
        
        return resultadoPesquisa;
    }
    
<<<<<<< HEAD

    public static ArrayList<Assento> take(int numeroAssento, char letraFileira) throws MzsCoreException {
=======
    public ArrayList<Assento> readAll(Integer numeroAssento, String letraFileira) throws MzsCoreException {
        System.out.println("\n\n!!!! Lendo: (" + numeroAssento + "," + letraFileira + ")\n\n");
        
        ArrayList<Assento> resultadoPesquisa;
        Assento template = new Assento(numeroAssento, letraFileira);
        
        LindaCoordinator.LindaSelector newSelector = LindaCoordinator.newSelector(template, Selecting.COUNT_ALL);
        
        resultadoPesquisa = capi.read(cref, newSelector, 0, null);
        
        System.out.println("Resultado da pesquisa: " + resultadoPesquisa);
        
        return resultadoPesquisa;
    }
    
    public ArrayList<Assento> take(Integer numeroAssento, String letraFileira) throws MzsCoreException {
        System.out.println("Taking");
        
>>>>>>> tuple-space
        ArrayList<Assento> resultadoPesquisa;
        Assento template = new Assento(numeroAssento, letraFileira);
        
        LindaCoordinator.LindaSelector newSelector = LindaCoordinator.newSelector(template);
        
        resultadoPesquisa = capi.take(cref, newSelector, 0, null);
        return resultadoPesquisa;
    }
<<<<<<< HEAD
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, MzsCoreException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteTupleSpace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteTupleSpace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteTupleSpace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteTupleSpace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
=======
    
    public ArrayList<Assento> takeAll(Integer numeroAssento, String letraFileira) throws MzsCoreException {
        ArrayList<Assento> resultadoPesquisa;
        Assento template = new Assento(numeroAssento, letraFileira);
        
        LindaCoordinator.LindaSelector newSelector = LindaCoordinator.newSelector(template, Selecting.COUNT_ALL);
        
        resultadoPesquisa = capi.take(cref, newSelector, 0, null);
        return resultadoPesquisa;
    }

    private static class Assento implements Serializable {
        private static final long serialVersionUID = 1L;

        private final Integer numeroAssento;
        private final String letraFileira;

        Assento(final Integer numeroAssento, final String letraFileira) {
            this.numeroAssento = numeroAssento;
            this.letraFileira = letraFileira;
>>>>>>> tuple-space
        }

<<<<<<< HEAD
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteTupleSpace().setVisible(true);
            }
        });
        //ClienteTupleSpace.write(10,'A');
        
        Scanner sc=new Scanner(System.in);  
        int  numeroAssento;
        char letraFileira;
        
        while(true) {
            System.out.println("[1] Escrever\n[2] Ler");
            int opcao = sc.nextInt();
            if( opcao == 1 ) {
                System.out.println("[ESCRITA]\nDigite o Template");
                
                System.out.println("Numero do Assento: ");
                numeroAssento = sc.nextInt();
                
                System.out.println("Letra da Fileira: ");
                letraFileira = (char) System.in.read();
                
                ClienteTupleSpace.write(numeroAssento, letraFileira);
                System.out.println("Tupla (" + numeroAssento + "," + letraFileira + ") adicionada");
                
            } 
            else if ( opcao == 2 ) {
                System.out.println("[LEITURA]\nDigite o assento");
                
                System.out.println("Numero do Assento: ");
                numeroAssento = sc.nextInt();
                
                System.out.println("Letra da Fileira: ");
                letraFileira = (char) System.in.read();
                
                ArrayList<Assento> resultadoPesquisa = ClienteTupleSpace.read(numeroAssento, letraFileira);
                System.out.println("Tupla lida: " + resultadoPesquisa.get(0));

            } 
            else {
               break;
            }
        }
        
=======
        @Override
        public String toString() {
            return "Assento: (" + numeroAssento + "," + letraFileira + ")\n\n";
        }
    
>>>>>>> tuple-space
    }

}
